############
# Upstream #
############
upstream upstream_localhost {
  server 127.0.0.1:8080;
}

########
# HTTP #
########
server {
  listen 80;

  server_name localhost;

  include /usr/local/openresty/nginx/defaults/server_include_defaults.conf;

  location / {
    return 301 https://$host$request_uri;
  }
}

#########
# HTTPS #
#########
server {
  listen 443 ssl http2;

  server_name localhost;

  set $organization_title 'Sample Organization';
  # select file name without extension in https://aasaam.github.io/brand-icons/ for example ir_aasaam.svg will be ir_aasaam
  set $organization_brand_icon 'ir_aasaam';

  ################
  # Auth Request #
  ################
  # > http://nginx.org/en/docs/http/ngx_http_auth_request_module.html
  # > disable

  ############################
  # Auth Request: Protection #
  ############################
  # > If OTP:
  # set $protection_config_challenge 'otp';
  # set $protection_config_otp_secret 'XXXXXXXXXXXXXXXX';
  # set $protection_config_otp_time '30';

  # > If JS:
  # set $protection_config_challenge 'js';

  # > If Captcha:
  # set $protection_config_challenge 'captcha';
  # set $protection_config_farsi_captcha '1';

  # > Protection Directive
  # set $protection_config_unauthorized_status 488; # or 401 default
  # include /usr/local/openresty/nginx/addon/protection/rule.profile.conf;
  # include /usr/local/openresty/nginx/defaults/server_protection.conf;

  # > 401: standard nginx auth request
  # error_page 401 = @error401;
  # > choose one: redirect or js redirect
  # include /usr/local/openresty/nginx/defaults/server_protection_401_js.conf;
  # include /usr/local/openresty/nginx/defaults/server_protection_401_redirect.conf;

  # > 488: Recommended custom aasaam status for protection
  # error_page 488 = @error488;
  # > choose one: redirect or js redirect
  # include /usr/local/openresty/nginx/defaults/server_protection_488_js.conf;
  # include /usr/local/openresty/nginx/defaults/server_protection_488_redirect.conf;

  # > essential server defaults
  include /usr/local/openresty/nginx/defaults/server_include_defaults.conf;

  # > or with custom access lua you will need
  # include /usr/local/openresty/nginx/defaults/server_include_defaults_no_lua.conf;
  # access_by_lua {
  #   -- essential access check
  #   require "access_normal"
  # }


  #########
  # naxsi #
  #########
  # > for apply waf
  # include /usr/local/openresty/nginx/defaults/server_naxsi_apply.conf;
  # > for testing using cookie setup
  # include /usr/local/openresty/nginx/defaults/server_naxsi_debug.conf;
  # > for learning
  # include /usr/local/openresty/nginx/defaults/server_naxsi_learning.conf;
  # > extra rules

  #######
  # SSL #
  #######
  # > A: security recommended
  # include /usr/local/openresty/nginx/defaults/server_http2_modern.conf;
  # > for backward tls versions
  # > B:
  include /usr/local/openresty/nginx/defaults/server_http2_intermediate.conf;
  # > for ancient clients and applications (not recommended)
  # > C:
  # include /usr/local/openresty/nginx/defaults/server_http2_legacy.conf;

  ssl_certificate /usr/local/openresty/nginx/addon/ssl/localhost/fullchain.pem;
  ssl_certificate_key /usr/local/openresty/nginx/addon/ssl/localhost/privkey.pem;
  ssl_trusted_certificate /usr/local/openresty/nginx/addon/ssl/localhost/chain.pem;
  ssl_stapling off;
  ssl_stapling_verify off;

  # > comment out if you sure want to serve always https
  # add_header Strict-Transport-Security "max-age=63072000" always;

  # > client-side certificate authentication
  # ssl_verify_client on;

  ##########
  # Sentry #
  ##########
  # set $sentry_project '0';
  # set $sentry_key '00000000000000000000000000000000';
  # set $sentry_host 'sentry.tld';

  # > sentry certificate transparency
  # add_header 'Expect-CT' 'report-uri="https://$sentry_host/api/$sentry_project/security/?sentry_key=$sentry_key"';

  # > catch console.* to sentry for front debugging if upstream not implemented
  # include /usr/local/openresty/nginx/defaults/server_sentry.conf;

  #################
  # Refresh Token #
  #################
  # > this will send GET request to this endpoint and cookie will be update
  # set $auto_refresh_token_uri '/path/to/refresh/token';
  # > how long to intervally send request to
  # set $auto_refresh_token_interval '10000';

  # > catch console.* to sentry for front debugging if upstream not implemented
  # include /usr/local/openresty/nginx/defaults/server_auto_refresh_token.conf;

  #############
  # PageSpeed #
  #############

  # > A: disable
  pagespeed off;

  # > B: enable via
  # pagespeed on;
  # pagespeed Domain $http_host;
  # > B1:
  # include /usr/local/openresty/nginx/defaults/page_speed_profile_1.conf;
  # > B2:
  # include /usr/local/openresty/nginx/defaults/page_speed_profile_2.conf;

  #########
  # Proxy #
  #########
  location / {
    # > pass headers to proxy backend
    include /usr/local/openresty/nginx/defaults/location_proxy_headers.conf;

    # > without page speed
    # include /usr/local/openresty/nginx/defaults/location_naxsi.conf;
    # > with page speed
    # include /usr/local/openresty/nginx/defaults/location_naxsi_page_speed.conf;
    # > extra rules
    # include /usr/local/openresty/nginx/addon/naxi/rules_000.conf;

    #########
    # Cache #
    #########
    # proxy_buffering on;
    # proxy_cache PROXYCACHE;
    # proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
    # proxy_cache_background_update on;
    # proxy_cache_bypass $http_cookie_admin;
    # proxy_cache_valid 200 302 10m;
    # proxy_cache_valid 404 1m;
    # add_header 'X-Cache-Status' $upstream_cache_status;

    # > upload size
    # client_max_body_size 10M;
    # client_body_buffer_size 10M;

    # > A: proxy http
    include /usr/local/openresty/nginx/defaults/location_proxy_http.conf;
    proxy_pass http://upstream_localhost;

    # > B: proxy https insecure (LAN or trusted network) [Bad practice]
    # include /usr/local/openresty/nginx/defaults/location_proxy_https_insecure.conf;
    # proxy_pass https://upstream_localhost;

    # > C: proxy https secure (WAN or untrusted network)
    # include /usr/local/openresty/nginx/defaults/location_proxy_https_secure.conf;
    # proxy_ssl_certificate /usr/local/openresty/nginx/addon/ssl/client.pem;
    # proxy_ssl_certificate_key /usr/local/openresty/nginx/addon/ssl/client.key;
    # proxy_ssl_trusted_certificate /etc/nginx/trusted_ca_cert.crt;
    # proxy_pass https://upstream_localhost;
  }

  ###########
  # FastCGI #
  ###########
  # location / {
  #   # pass headers to proxy backend
  #   include /usr/local/openresty/nginx/defaults/fastcgi_params.conf;

  #   #########
  #   # Cache #
  #   #########
  #   fastcgi_buffering on;
  #   fastcgi_cache PROXYCACHE;
  #   fastcgi_cache_valid 200 1h;
  #   fastcgi_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
  #   fastcgi_cache_background_update on;
  #   fastcgi_cache_bypass $http_cookie_admin;
  #   fastcgi_cache_valid 200 302 10m;
  #   fastcgi_cache_valid 404 1m;
  #   add_header 'X-Cache-Status' $upstream_cache_status;

  # > upload size
  # client_max_body_size 10M;
  # client_body_buffer_size 10M;

  #   # address
  #   fastcgi_pass 127.0.0.1:9000;
  # }
}
